/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.metapod.http.client;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.nio.CharBuffer;

public class App {
    public static void main(String[] args) throws IOException {
        App app = new App();
        app.run();
    }

    private void run() throws IOException {
        System.out.println("Hello world!");

/**
 * 1. Connect
 */
        try (Socket socket = new Socket("google.com", 80)) {
            ;

            System.out.println("Connect!");

/**
 * 2. Request
 */
            String message = """
                    GET / HTTP/1.1
                    Host: example.com   
                                    
                    """;
            /**방법 1: OutputStream 사용
             * 바이트로 보내는 거기 때문에 message를 바이트로 변환시켜야 함
             * */
//        OutputStream outputStream = socket.getOutputStream();
//        outputStream.write(message.getBytes());

            /**방법 2: OutputStreamWriter 사용
             *OutputStream을 한번 더 감싼건데, 인자에 message를 스트링으로 그냥 넣어도됨.
             * 내부적으로 buffer가 있어서 flush해야함.
             * */
            OutputStreamWriter writer = new OutputStreamWriter(socket.getOutputStream());

            writer.write(message);
            writer.flush();
            System.out.println("Request!");
/**
 * 3. Response
 * */
            /**
             * 방법1
             */
//        InputStream inputStream = socket.getInputStream();
//        byte[] bytes = new byte[1_000_000];
//        int size = inputStream.read(bytes);
//
//        byte[] data = Arrays.copyOf(bytes, size);
//        String text = new String(data);
//        System.out.println(text);

            /**
             * 방법2
             * 얘는 사이즈 기록해서 그 사이즈만큼 잘라주는 번거로움 사라짐
             */
            InputStreamReader reader = new InputStreamReader(socket.getInputStream());

            CharBuffer charBuffer = CharBuffer.allocate(1_000_000);

            reader.read(charBuffer); //캐릭터버퍼에다가 쓰기를 하는것임

            charBuffer.flip(); //이걸해줘야 스트링으로 잘 나온다네

            System.out.println(charBuffer.toString());

/**
 * 클로즈
 */
//            socket.close(); //try with resource 해서 노필요
        }

        System.out.println("Complete!");
    }
}
